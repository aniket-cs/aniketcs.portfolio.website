import{i as f}from"https://app.framerstatic.com/chunk-CLVPFFWG.mjs";import{d as o}from"https://app.framerstatic.com/chunk-SHB5EXMY.mjs";import{a as h}from"https://app.framerstatic.com/chunk-35B3JZIH.mjs";import{a as c}from"https://app.framerstatic.com/chunk-YE25YANI.mjs";import{r as m}from"https://app.framerstatic.com/chunk-LTYMRFFX.mjs";import{i as u,p as d}from"https://app.framerstatic.com/chunk-XW2R7BKI.mjs";import{k as l}from"https://app.framerstatic.com/chunk-J7RAPXVX.mjs";import{a as p}from"https://app.framerstatic.com/chunk-WNSBRACC.mjs";import{j as r}from"https://app.framerstatic.com/chunk-AHQIRSXG.mjs";function g(a,e){if(a.projectStore.projectLicenseType===m())return a.modalStore.set({type:"Upsell",source:"upsell",title:"Upgrade to Enterprise",description:"Sign up for an Enterprise plan to increase your file upload limit to 150MB and unlock other powerful features that help scale your site.",upsell:"file-limit-upsell",confirmLabel:"Contact us",cancelLabel:"Maybe Later",upsellSitePlan:"enterpriseSite",upsellFeatures:["Advanced Permissions","Custom Limits","Custom Hosting","Custom Proxy Support","Enterprise Security","Dedicated Support"]});let i=a.projectStore.resourceLimits?.fileUploadLimitInMB;p(typeof i=="number","fileUploadLimitInMB is not a number");let t=i.toLocaleString()+"MB",s=(e/h).toLocaleString(void 0,{minimumFractionDigits:0,maximumFractionDigits:1})+"MB";return a.modalStore.set({source:"upsell",type:"UpsellFeature",upsellFeature:"fileUploadLimitInMB",description:`Your current plan limits file uploads to ${t}, and you\u2019re trying to upload a file that\u2019s ${s}. Upgrade your site to increase the limit and upload your file.`})}var y=class{constructor(e,{concurrency:i=5,silent:t=!1}={}){this.engine=e;r(this,"uploads",new Map);r(this,"completed",0);r(this,"failed",0);r(this,"generating",!1);r(this,"resolveStatusUpdate");r(this,"limiter");r(this,"silent");this.limiter=new f(i),this.silent=t}add(e){return this.createTask(e,i=>i)()}createTask(e,i){let t=this.uploads.get(e);t||(t={task:async()=>{try{return typeof e=="string"?e.startsWith("data:")?await this.uploadFile(await c(e,"imported")):await o.uploadAssetByURL(e,{silent:this.silent,refreshAssetService:!1}):await this.uploadFile(e)}catch(U){throw this.failed++,U}finally{this.completed++,this.resolveStatusUpdate?.()}}},this.uploads.set(e,t));let s=t;return async()=>(s.resultPromise||(s.resultPromise=this.limiter.run(s.task),this.resolveStatusUpdate?.()),i(await s.resultPromise))}async uploadFile(e){let i=this.engine.projectStore.resourceLimits?.fileUploadLimitInMB??void 0,t={silent:this.silent,maxFileSize:i,onExceedsCustomMaxSize:n=>g(this.engine,n),refreshAssetService:!1},s;if(e.type.startsWith("image/")?s=await o.uploadImage(e,t):e.type.startsWith("video/")?s=await o.uploadVideo(e,t):s=await o.uploadFile(e,t),!s)throw Error("Failed to upload file");return s}get active(){return[...this.uploads.values()].map(({resultPromise:e})=>e).filter(u)}get status(){let{active:e,completed:i,failed:t}=this;return{started:e.length,completed:i,failed:t}}async*statusUpdates(){if(this.generating)throw Error("`statusUpdates` is in use by another call");for(this.generating=!0,yield this.status;this.completed<this.active.length;)await new Promise(e=>{this.resolveStatusUpdate=()=>{e(),this.resolveStatusUpdate=void 0}}),yield this.status;await this.engine.webAssetsService?.refresh().catch(l),this.generating=!1}async results(){let e=await Promise.allSettled(this.active).then(i=>i.filter(d).map(t=>t.value));return await this.engine.webAssetsService?.refresh().catch(l),e}};export{y as a};
//# sourceMappingURL=https://app.framerstatic.com/chunk-7OKI33WV.mjs.map
